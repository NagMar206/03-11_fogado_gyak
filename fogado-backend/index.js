require("dotenv").config();                                                                     //Ha k√ºl√∂n .env f√°jlban t√°roln√°m az adatb√°zist, de ezt nem haszn√°ln√°m. 
const mysql = require("mysql2");                                                                //MySQL kapcsol√≥d√°shoz, adatb√°zis m≈±veletek



const express = require("express");
const cors = require("cors");

const app = express();
const port = 5000; // üîπ Port megad√°sa

app.use(cors());
app.use(express.json());

app.listen(port, () => {
  console.log(`Szerver fut a http://localhost:${port} c√≠men`);
});



//MySQL kapcsolat l√©trehoz√°s

const db = mysql.createConnection({                                                             //MySQL kapcsolat
    host: "localhost",
    user: 'root',
    password: '',
    database:'fogado',
    port:'3307'                                                                                 //Port (3307)
})

db.connect((err) => {                                                                           //Adatb√°zis kapcsolat ellen≈ërz√©se
    if (err) {
        console.error("MySQL kapcsolati hiba: " + err.message);
    }
    else {
        console.log("Adatb√°zis kapcsolat l√©trehozva!");
    }
});





//API v√©gpontok l√©trehoz√°sa - Alap Weboldal


app.get("/", (req, res) => {
    res.send("Szerver fut!")
});

app.get("/szobak", (req, res) => {
    const sql = "SELECT * FROM szobak";
    db.query(sql, (err,result) => {
        if (err) {
            return res.status(500).json({error: err.message});
        }
        res.json(result)
    })
})

//Szob√°k kihaszn√°lts√°ga

app.get("/foglaltsag", (req, res) => {
    const sql = `
    SELECT szobak.sznev,                                                                        
    COUNT(foglalasok.fsorsz) AS vendegek,
    SUM(DATEDIFF(foglalasok.tav, foglalasok.erk)) AS vendegejszakak
    FROM foglalasok
    JOIN szobak ON foglalasok.szoba = szobak.szazon
    GROUP BY szobak.sznev
    ORDER BY vendegejszakak ASC, vendegek ASC;
  `;
  db.query(sql, (err,result) => {
    if (err) {
        return res.status(500).json({error:err.message});
    }
    res.json(result);
  })
})

//szobak.sznev - szob√°k t√°bl√°b√≥l
//COUNT & SUM  - foglala√°sok szob√°nk√©nt √©s h√°ny √©jszaka sz√°mol√°sa
//FROM foglalasok - onnan j√∂n ki az adat
//JOIN szobak ON - szob√°k √©s foglal√°sok t√°bla √∂sszekapcsol√°sa
//foglalasok.szoba = foglalasok.szazon - k√∂z√∂s oszlop alapj√°n k√∂tj√ºk √∂ssze
//GROUP BY - azonos szob√°khoz k√∂thet≈ë adatok, minden szoba csak 1x
//ORDER BY - Vendegejszakak n√∂vekv≈ë sorrendben

//Kiv√°lasztott szoba foglalts√°ga

app.get("/foglaltsag/:szobaId", (req, res) => {
    const {szobaid} = req.params;
    const sql = `
    SELECT vendegek.vnev, foglalasok.erk, foglalasok.tav
    FROM foglalasok
    JOIN vendegek ON foglalasok.vendeg = vendegek.vsorsz
    WHERE foglalasok.szoba = ?
    ORDER BY vendegek.vnev ASC
  `;
  db.query(sql, [szobaID], (err, result) => {
    if (err) {
        return res.status(500).json({error:err.message})
    }
    res.json(result);
  })
})

//foglalasok.vendeg tartalmazza a vsorsz-t (vend√©g azonos√≠t√≥)
//vendegek.vsorsz tartalmazza a vend√©gek val√≥di nev√©t amit ki kell √≠ratni.
//WHERE foglalasok.szoba = ? - a backend adja √°t a k√©rd≈ëjel √©rt√©k√©t, 1-es szoba esetet√©n foglalasok.szoba = 1





